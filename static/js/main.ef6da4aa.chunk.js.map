{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toogleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","new_text","replace","txt","charAt","substr","document","getElementById","navigator","clipboard","writeText","length","split","Alert","alert","word","nw","slice","Capitalize","msg","App","setMode","setAlert","massage","setTimeout","aboutText","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ef6da4aa.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\n\nexport default function Navbar(props) {\n    return (\n        <>\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n                <div className=\"container-fluid\">\n                    <a className=\"navbar-brand\" href=\"https://aritraghorai.github.io/Text-Utils/\">{props.title}</a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse m-auto\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"https://aritraghorai.github.io/Text-Utils/\">Home</a>\n                            </li>\n                            {/* <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                            </li> */}\n                        </ul>\n                        {/* <form className=\"d-flex\">\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n                        </form> */}\n                        <div className=\"form-check form-switch\">\n                            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toogleMode} id=\"flexSwitchCheckDefault\" />\n                            <label className={`form-check-level text-${props.mode === 'dark' ? 'light' : 'dark'}`} htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'dark' ? 'Enable Light Mode' : 'Enable Dark Mode'}</label>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        </>\n    )\n}\n//Declrar Proptype\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n//Declear Default Prop\n// Navbar.defaultProps = {\n//     // title: 'Set Title Here',\n//     aboutText: 'Set About'\n// }\n\n","import React, { useState } from 'react'\n\n\nexport default function TextForm(props) {\n    const [text, setText] = useState(\"\")\n    const uppercaseClick = () => {\n        // console.log(\"Uppercase is Click\");\n        let newText = text.toUpperCase()\n        setText(newText)\n        props.showAlert(\"Uppercase Transformation Done Successfully\", \"success\")\n    }\n    const lowercaseClick = () => {\n        // console.log(\"Uppercase is Click\");\n        let newText = text.toLowerCase()\n        setText(newText)\n        props.showAlert(\"LowerCase Transformation Done Successfully\", \"success\")\n    }\n    const onChange = (event) => {\n        setText(event.target.value)\n    }\n    const clearText = () => {\n        setText(\"\")\n        props.showAlert(\"Clear Text  Done Successfully\", \"success\")\n    }\n    const toTitleCase = () => {\n        let new_text = text.replace(\n            /\\w\\S*/g,\n            function (txt) {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            }\n        );\n        setText(new_text);\n        props.showAlert(\"To Tile Case Transformation Done Successfully\", \"success\")\n    }\n    const handleCopy = () => {\n        var text = document.getElementById(\"myBox\")\n        navigator.clipboard.writeText(text.value)\n        props.showAlert(\"Copy Done Successfully\", \"success\")\n    }\n    return (\n        <>\n            <div className='container' style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\n                <h1>{props.heading}</h1>\n                <div className=\"mb-3\">\n                    <textarea className=\"form-control \" id=\"myBox\" value={text} onChange={onChange} style={{\n                        backgroundColor: props.mode === 'light' ? 'white' : '#201f1f',\n                        color: props.mode === 'light' ? 'black' : 'white'\n                    }} rows=\"8\"></textarea>\n                </div >\n                <button className=\"btn btn-primary mx-2\" onClick={uppercaseClick}>Convert To UpperCase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={lowercaseClick}>Convert To Lowercase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={clearText}>Clear Text</button>\n                <button className=\"btn btn-primary mx-2\" onClick={toTitleCase}>Capitalize Case</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy</button>\n\n            </div>\n            <div className=\"container my-3\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\n                <h2>Your Text Summery</h2>\n                <p>{text.length == 0 ? 0 : text.split(\" \").length} words,{text.replace(\" \", \"\").length} Character</p>\n                <p>{0.08 * text.split(\" \").length} Minites To Read</p>\n                <h2>Preview</h2>\n                <p>{text.length == 0 ? 'Enter Some Thing To Preview' : text}</p>\n            </div>\n        </>\n    )\n}\n\n","import React from 'react'\n\nexport default function Alert(props) {\n    const Capitalize = (word) => {\n        let nw = word.toLowerCase();\n        return nw.charAt(0).toUpperCase() + nw.slice(1);\n    }\n    return (\n\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{Capitalize(props.alert.type)}</strong>:{props.alert.msg}\n        </div>\n\n    )\n}\n","\nimport './App.css';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  const showAlert = (massage, type) => {\n    setAlert({\n      msg: massage,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500)\n  }\n  const toogleMode = () => {\n    if (mode == 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = 'rgb(63 88 110)'\n      showAlert(\"Dark Mode Has Been Enable Successfully\", \"success\")\n    } else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light Mode Has Been Enable Successfully\", \"success\")\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"Text Utils\" aboutText=\"About\" mode={mode} toogleMode={toogleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n            use exact to exact match\n            <Route exact path=\"/about\">\n              <About mode={mode} />\n            </Route>\n            <Route exact path=\"/\"> */}\n        <TextForm heading=\"Enter The Text to analyze\" mode={mode} showAlert={showAlert} />\n        {/* </Route>\n          </Switch> */}\n\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}